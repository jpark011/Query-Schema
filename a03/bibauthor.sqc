#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "util.h"

EXEC SQL INCLUDE SQLCA; 

EXEC SQL BEGIN DECLARE SECTION;
    char db[6] = "cs348";
    char name[23];
    char title[71];
    int year;
    // for books
    char pubid[11];  
    char publisher[51];
    // for journals
    int volume;
    int number;
    // for articles
    char appearsin[11];
    int startpage;
    int endpage;
    int numAuthors;
EXEC SQL END DECLARE SECTION;

typedef enum Type {
    Book, Journal, Proceedings, Article
} Type;

const char BOOK[] = "book";
const char JOURNAL[] = "journal";
const char PROCEEDINGS[] = "proceedings";
const char ARTICLE[] = "article";

char* getType( Type t ) {
    switch (t) {
        case Book:          return BOOK;
        case Journal:       return JOURNAL;
        case Proceedings:   return PROCEEDINGS;
        case Article:       return ARTICLE;
        default:            return NULL;  
    }
}

int main( int argc, char *argv[] ) {
    if ( argc != 2 ) {
        printf("Usage: %s [ author_name ]\n", argv[0]);
        exit(1);
    };

    EXEC SQL WHENEVER SQLERROR  GO TO error;

    EXEC SQL CONNECT TO :db;

    strncpy( name, argv[1] , 23 );
        
    EXEC SQL DECLARE p CURSOR FOR
        SELECT Au.name name, Pu.title title, Pu.pubid pubid,
            unionPu.year year, unionPu.volume volume, unionPu.number number, unionPu.publisher publisher,
            unionPu.appearsin appearsin, unionPu.startpage startpage, unionPu.endpage endpage
        FROM author Au 
            JOIN wrote W 
                ON W.aid = Au.aid 
            JOIN publication Pu 
                ON Pu.pubid = W.pubid 
            JOIN (
                SELECT pubid, year, NULL AS volume, NULL AS number, NULL AS publisher, NULL AS appearsin, NULL AS startpage, NULL AS endpage
                FROM proceedings
                UNION
                SELECT pubid, year, volume, number, NULL AS publisher, NULL AS appearsin, NULL AS startpage, NULL AS endpage
                FROM journal
                UNION
                SELECT pubid, year, NULL AS volume, NULL AS number, publisher, NULL AS appearsin, NULL AS startpage, NULL AS endpage
                FROM book
                UNION
                SELECT pubid, NULL AS year, NULL AS volume, NULL AS number, NULL AS publisher, appearsin, startpage, endpage
                FROM article
            ) unionPu
                ON unionPu.pubid = Pu.pubid
        WHERE Au.name = :name
        ORDER BY unionPu.year;
    EXEC SQL OPEN p;
    EXEC SQL WHENEVER NOT FOUND GO TO end;
    for (;;) {
        Type t;
        EXEC SQL FETCH p INTO :name, :title, :pubid, :year, :volume, :number, :publisher,
                                :appearsin, :startpage, :endpage;
        if ( appearsin != NULL ) {          // article
            t = Article;
        } else if ( publisher != NULL ) {   // book 
            t = Book;
        } else if ( 0 <= volume ) {         // journal
            t = Journal;
        } else {                            // proceedings
            t = Proceedings;
        }

        printf( "Pubid: %s\n", pubid );
        printf( "Type: %s\n", getType( t ) );
        printf( "Title: %s\n", title );

        if ( t == Book || t == Article ) {
            EXEC SQL DECLARE a CURSOR FOR
                SELECT Au.name name
                FROM author Au
                    JOIN wrote W
                        ON W.aid = Au.aid
                WHERE W.pubid = :pubid
                ORDER BY Au.name;
        }

        switch ( t ) {
            case Proceedings:
                printf("Authors: ");
                for (;;) {
                    EXEC SQL FETCH a INTO :name
                    printf("%s, ", name);
                }
                printf("\nYear: %d\n", year);
                break;
            case Journal:
                printf("Volume: %d\n", year);
                printf("Number: %d\n", year);
                printf("Year: %d\n", year);
                break;
            case Book:
                printf("Year: %d\n", year);
                break;
            case Article:
                printf("Authors: ");
                for (;;) {
                    EXEC SQL FETCH a INTO :name
                    printf("%s, ", name);
                }
                printf("Volume: %d\n", year);
                printf("In: %s\n", appearsin);
                printf("Pages: %d--%d\n", startpage, endpage);
                break;
            default:
        }
    }
end:
    EXEC SQL CLOSE p;

    EXEC SQL COMMIT;
    EXEC SQL CONNECT RESET;
    exit(0);

error:
    check_error("My error", &sqlca);
    EXEC SQL WHENEVER SQLERROR CONTINUE;

    EXEC SQL ROLLBACK;
    EXEC SQL CONNECT reset;
    exit(1);
}