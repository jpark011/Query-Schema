#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "util.h"

EXEC SQL INCLUDE SQLCA; 

EXEC SQL BEGIN DECLARE SECTION;
    char db[6] = "cs348";
    char pubid[11];  
    char title[71];
    int year;
    char appearsin[11];
    // for journals
    int volume;
    int number;
EXEC SQL END DECLARE SECTION;

typedef enum Type {
    Book, Journal, Proceedings, Article
} Type;

const char BOOK[] = "book";
const char JOURNAL[] = "journal";
const char PROCEEDINGS[] = "proceedings";
const char ARTICLE[] = "article";

char* getType( Type t ) {
    switch (t) {
        case Book:          return BOOK;
        case Journal:       return JOURNAL;
        case Proceedings:   return PROCEEDINGS;
        case Article:       return ARTICLE;
        default:            return NULL;  
    }
}

int main( int argc, char *argv[] ) {
    if ( argc != 2 ) {
        printf("Usage: %s [ article_pubid ]\n", argv[0]);
        exit(1);
    };

    EXEC SQL WHENEVER SQLERROR  GO TO error;

    EXEC SQL CONNECT TO :db;

    strncpy( name, argv[1] , 23 );
        
    EXEC SQL DECLARE p CURSOR FOR
        SELECT Pu.pubid pubid, Pu.title title, unionPJ.year year,
                unionPJ.volume volume, unionPJ.number number
        FROM publication Pu
            JOIN (
                SELECT pubid, year, NULL AS volume, NULL AS number
                FROM proceedings
                UNION
                SELECT pubid, year, volume, number
                FROM journal
            ) unionPJ
            LEFT JOIN (
                SELECT appearsin
                FROM article A
                WHERE A.pubid = :pubid
            ) Ap
                ON Ap.appearsin = Pu.pubid
        ORDER BY Ap.startpage
    EXEC SQL OPEN p;
    EXEC SQL WHENEVER NOT FOUND GO TO end;
    for (;;) {
        Type t;
        EXEC SQL FETCH p INTO :pubid, :title, :year, :volume, :number;
        if ( 0 <= volume ) {         // journal
            t = Journal;
        } else {                            // proceedings
            t = Proceedings;
        }

        printf( "Pubid: %s\n", pubid );
        printf( "Type: %s\n", getType( t ) );
        printf( "Title: %s\n", title );

        switch ( t ) {
            case Proceedings:
                printf("Authors: ");
                for (;;) {
                    EXEC SQL FETCH a INTO :name
                    printf("%s, ", name);
                }
                printf("\nYear: %d\n", year);
                break;
            case Journal:
                printf("Volume: %d\n", volume);
                printf("Number: %d\n", number);
                printf("Year: %d\n", year);
                break;
            case Book:
                printf("Year: %d\n", year);
                break;
            case Article:
                printf("Authors: ");
                for (;;) {
                    EXEC SQL FETCH a INTO :name
                    printf("%s, ", name);
                }
                printf("Volume: %d\n", year);
                printf("In: %s\n", appearsin);
                printf("Pages: %d--%d\n", startpage, endpage);
                break;
            default:
        }
    }
end:
    EXEC SQL CLOSE p;

    EXEC SQL COMMIT;
    EXEC SQL CONNECT RESET;
    exit(0);

error:
    check_error("My error", &sqlca);
    EXEC SQL WHENEVER SQLERROR CONTINUE;

    EXEC SQL ROLLBACK;
    EXEC SQL CONNECT reset;
    exit(1);
}